/*
 * Copyright (c) 2019 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*
 * filename: nas_ndi_l2mc.h
 */

/**
 * \file nas_ndi_l2mc.h
 * \brief NDI interface APIs for l2mc
 **/


#ifndef __NAS_NDI_L2MC_H
#define __NAS_NDI_L2MC_H

#include "std_error_codes.h"
#include "ds_common_types.h"
#include "nas_types.h"
#include "nas_ndi_common.h"

#ifdef __cplusplus
extern "C" {
#endif

#define NDI_MAX_MC_GRP_MEMBER_ATTR  2

typedef enum {
    // Allow multicast packets flooding on all VLAN members
    NDI_FLOOD_TO_ALL_PORTS,
    // Disable mulitacast packets flooding
    NDI_FLOOD_TO_NO_PORT,
    // Allow multicast packets flooding on members of group
    NDI_FLOOD_TO_GROUP
} ndi_flood_restrict_type_t;

/**
 * @brief Create a new L2MC Group in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param[out] mc_grp_id_p - L2MC Group ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_group_create(npu_id_t npu_id, ndi_obj_id_t *mc_grp_id_p);

/**
 * @brief Delete an existing L2MC Group from NPU
 *
 * @param npu_id - NPU ID in which to delete
 * @param mc_grp_id - L2MC Group ID of L2MC Group to be deleted.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_group_delete(npu_id_t npu_id, ndi_obj_id_t mc_grp_id);

/**
 * @brief Add port member to L2MC Group
 *
 * @param npu_id - NPU ID in which to add multicast group member
 * @param group_id - L2MC Group ID to which member will be added.
 * @param port_id - Port ID of the port to be added as member of group.
 * @param[out] mem_id_p - L2MC Group Member ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_group_add_port_member(npu_id_t npu_id,
                                            ndi_obj_id_t group_id, port_t port_id,
                                            ndi_obj_id_t *member_id_p);

/**
 * @brief Add LAG member to L2MC Group
 *
 * @param npu_id - NPU ID in which to add multicast group member
 * @param group_id - L2MC Group ID to which member will be added.
 * @param lag_id - LAG ID of the LAG port to be added as member of group.
 * @param[out] mem_id_p - L2MC Group Member ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_group_add_lag_member(npu_id_t npu_id,
                                           ndi_obj_id_t group_id, ndi_obj_id_t lag_id,
                                           ndi_obj_id_t *member_id_p);


/**
 * @brief Add or delete tunnel port to L2MC Group
 *
 * @param npu_id - NPU ID in which to add multicast group member
 * @param group_id - L2MC Group ID to which tunnel port will be added or deleted.
 * @param tun_brport_id - Tunnel port's OID .
 * @param add - true for addtion, false for deletion.
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_handle_tunnel_member(npu_id_t npu_id,
     ndi_obj_id_t group_id, ndi_obj_id_t tun_brport_id, hal_ip_addr_t *rem_ip, bool add);


/**
 * @brief Add or delete lag to L2MC Group
 *
 * @param npu_id - NPU ID in which to add multicast group member
 * @param group_id - L2MC Group ID to which sub port will be added or deleted.
 * @param lag_id - Lag ID
 * @param vid - vlan id of the Sub port
 * @param add - true for addtion, false for deletion.
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */

t_std_error ndi_l2mc_handle_lagport_add (npu_id_t npu_id,
     ndi_obj_id_t group_id, ndi_obj_id_t lag_id, hal_vlan_id_t vid, bool add);
/**
 * @brief Add or delete sub port to L2MC Group
 *
 * @param npu_id - NPU ID in which to add multicast group member
 * @param group_id - L2MC Group ID to which sub port will be added or deleted.
 * @param port_id - Sub port's ID
 * @param vid - vlan id of the Sub port
 * @param add - true for addtion, false for deletion.
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */

t_std_error ndi_l2mc_handle_subport_add (npu_id_t npu_id,
           ndi_obj_id_t group_id, port_t port_id, hal_vlan_id_t vid, bool add);
/**
 * @brief Delete an existing member from L2MC Group
 *
 * @param npu_id - NPU ID in which to delete
 * @param mc_grp_id - L2MC Group Member ID of Group Member to be deleted.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_group_delete_member(npu_id_t npu_id, ndi_obj_id_t member_id);

/**
 * @brief Configure multicast flood-restrict for specific VLAN
 *
 * @param npu_id - NPU ID in which to configure.
 * @param vid - VLAN ID for which to be configured.
 * @param restr_type - flood-restrict type applied to VLAN, could be set as allowing multicast packets flooding
 *                     on all VLAN members, disabling packets flooding, or allowing packets flooding on group
 *                     members only.
 * @param group_id - associated group ID to define flooding members, only work with NDI_FLOOD_TO_GROUP type, and
                     will be ignored for other types.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_l2mc_set_flood_restrict(npu_id_t npu_id, hal_vlan_id_t vid,
                                        ndi_flood_restrict_type_t restr_type,
                                        ndi_obj_id_t group_id);
/**
 * @brief Get l2mc vlan and port look enabled for the NPU
 * @return returns true if its enabled, otherwise false
 */

bool ndi_l2mc_vlan_port_lookup_enabled_get (void);

#ifdef __cplusplus
}
#endif
#endif
