/*
 * Copyright (c) 2019 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*
 * filename: nas_ndi_trap.h
 */

/**
 * \file nas_ndi_trap.h
 * \brief NDI interface APIs for TRAP
 **/


#ifndef __NAS_NDI_TRAP_H
#define __NAS_NDI_TRAP_H

#include "std_error_codes.h"
#include "ds_common_types.h"
#include "dell-base-trap.h"
#include "nas_types.h"
#include "nas_ndi_common.h"

#define NAS_ACL_TRAP_PARAM_L 2

#ifdef __cplusplus
extern "C" {
#endif

/** \defgroup NDIAPITrap NDI API - TRAP
 *
 *  \{
 */

typedef struct nas_acl_trap_attr_t_ {
    nas_attr_id_t attr_id;
    size_t vlen;
    union {
        uint64_t     u64;
        uint32_t     u32;
        uint16_t     u16;
        uint8_t      u8; 
        ndi_obj_id_t oid;
        void         *p;
    } val;
} nas_acl_trap_attr_t;

/**
 * @brief Create a new ACL trapid in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param trap_attr_params - Attributes for the ACL Trapid being created
 * @param plen - Attributes size for the ACL Trapid being created
 * @param[out] ndi_trap_id_p - Trapid ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_acl_trapid_create(npu_id_t npu_id, nas_acl_trap_attr_t *trap_attr_params,
				  size_t plen, ndi_obj_id_t *ndi_trap_id_p);
/**
 * @brief Set a ACL trapid attribute in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param trap_attr_params - Attributes for the ACL Trapid being created
 * @param plen - Attributes size for the ACL Trapid being created
 * @param ndi_trap_id - Trapid ID by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_acl_trapid_set(npu_id_t npu_id, nas_acl_trap_attr_t *trap_attr_params, size_t plen,
                               ndi_obj_id_t ndi_trap_id);
/**
 * @brief Delete an existing ACL Trapid from NPU
 *
 * @param npu_id - NPU ID in which to delete
 * @param ndi_trap_id - NDI Trapid ID of ACL Trapid to be deleted.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
  t_std_error ndi_acl_trapid_delete(npu_id_t npu_id, nas_acl_trap_attr_t *trap_attr_params, ndi_obj_id_t ndi_trap_id);


/**
 * @brief Create a new ACL trap grp in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param trap_attr_params - Attributes for the ACL Trapid being created
 * @param plen - Attributes size for the ACL Trapid being created
 * @param[out] ndi_trap_grp_p - Trapid Grp generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_acl_trapgrp_create(npu_id_t npu_id, nas_acl_trap_attr_t *trap_attr_params, size_t plen,
                                   ndi_obj_id_t *ndi_trap_grp_p);
  
/**
 * @brief Set a new ACL trap grp in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param trap_attr_params - Attributes for the ACL Trapid being created
 * @param plen - Attributes size for the ACL Trapid being created
 * @param ndi_trap_grp - Trapid Grp by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_acl_trapgrp_set(npu_id_t npu_id, nas_acl_trap_attr_t *trap_attr_params, size_t plen,
                                ndi_obj_id_t ndi_trap_grp);

/**
 * @brief Delete a new ACL trap grp in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param ndi_trap_grp - Trapid Grp by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_acl_trapgrp_delete(npu_id_t npu_id, ndi_obj_id_t ndi_trap_grp);
  
/**
 * \}
 */
#ifdef __cplusplus
}
#endif
#endif
