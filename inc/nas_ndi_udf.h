/*
 * Copyright (c) 2019 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may obtain
 * a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * THIS CODE IS PROVIDED ON AN  *AS IS* BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 * FOR A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
 *
 * See the Apache Version 2.0 License for specific language governing
 * permissions and limitations under the License.
 */

/*
 * filename: nas_ndi_udf.h
 */

/**
 * \file nas_ndi_udf.h
 * \brief NDI interface APIs for UDF
 **/


#ifndef __NAS_NDI_UDF_H
#define __NAS_NDI_UDF_H

#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
    NAS_NDI_UDF_GROUP_GENERIC,
    NAS_NDI_UDF_GROUP_HASH
} ndi_udf_group_type_t;

typedef struct _ndi_udf_grp {
    ndi_udf_group_type_t group_type;
    uint16_t length;
    size_t udf_count;
    ndi_obj_id_t *udf_id_list;
} ndi_udf_grp_t;

#define NAS_NDI_IP_TYPE_IPV4    0x800
#define NAS_NDI_IP_TYPE_IPV6    0x86dd

#define NAS_NDI_L3_TYPE_GRE     0x2f

typedef enum {
    NAS_NDI_UDF_MATCH_NON_TUNNEL,
    NAS_NDI_UDF_MATCH_GRE_TUNNEL
} ndi_udf_match_type_t;

typedef struct _ndi_udf_match {
    uint8_t priority;
    ndi_udf_match_type_t type;
    union {
        struct {
            uint16_t l2_type;
            uint16_t l2_type_mask;
            uint8_t l3_type;
            uint8_t l3_type_mask;
        } non_tunnel;
        struct {
            uint16_t outer_ip_type;
            uint16_t inner_ip_type;
        } gre_tunnel;
    };
} ndi_udf_match_t;

typedef enum {
    NAS_NDI_UDF_BASE_L2,
    NAS_NDI_UDF_BASE_L3,
    NAS_NDI_UDF_BASE_L4
} ndi_udf_base_t;

typedef struct _ndi_udf {
    ndi_obj_id_t udf_group_id;
    ndi_obj_id_t udf_match_id;
    ndi_udf_base_t udf_base;
    uint16_t udf_offset;
    size_t hash_mask_count;
    uint8_t *udf_hash_mask;
} ndi_udf_t;

/**
 * @brief Create a new UDF Group in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param udf_group_p - Attributes for the UDF Group being created
 * @param[out] udf_group_id_p - Group ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_group_create(npu_id_t npu_id, const ndi_udf_grp_t *udf_grp_p,
                                 ndi_obj_id_t *udf_grp_id_p);

/**
 * @brief Delete an existing UDF Group from NPU
 *
 * @param npu_id - NPU ID in which to delete
 * @param udf_grp_id - NDI Group ID of UDF Group to be deleted.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_group_delete(npu_id_t npu_id, ndi_obj_id_t udf_grp_id);

/**
 * @brief Get list of UDF under the UDF Group
 *
 * @param npu_id - NPU ID in which to obtain attribute
 * @param udf_grp_id - NDI Group ID of UDF Group to be obtained.
 * @param [out] udf_id_list - result of list of UDF ID.
 * @param [in/out] udf_id_count - size of UDF list buffer as input,
 *                                return number of UDF IDs in list
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_group_get_udf_list(npu_id_t npu_id, ndi_obj_id_t udf_grp_id,
                                       ndi_obj_id_t *udf_id_list, size_t *udf_id_count);

/**
 * @brief Create a new UDF Match in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param udf_match_p - Attributes for the UDF Match being created
 * @param[out] udf_match_id_p - Match ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_match_create(npu_id_t npu_id, const ndi_udf_match_t *udf_match_p,
                                 ndi_obj_id_t *udf_match_id_p);


/**
 * @brief Delete an existing UDF Match from NPU
 *
 * @param npu_id - NPU ID in which to delete
 * @param udf_match_id - NDI Match ID of UDF Match to be deleted.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_match_delete(npu_id_t npu_id, ndi_obj_id_t udf_match_id);

/**
 * @brief Create a new UDF in NPU
 *
 * @param npu_id - NPU ID in which to create
 * @param udf_p - Attributes for the UDF being created
 * @param[out] udf_id_p - UDF ID generated by NDI.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_create(npu_id_t npu_id, const ndi_udf_t *udf_p,
                           ndi_obj_id_t *udf_id_p);

/**
 * @brief Delete an existing UDF from NPU
 *
 * @param npu_id - NPU ID in which to delete
 * @param udf_id - NDI ID of UDF to be deleted.
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_delete(npu_id_t npu_id, ndi_obj_id_t udf_id);

/**
 * @brief Get list of hash mask of UDF
 *
 * @param npu_id - NPU ID in which to obtain attribute
 * @param udf_id - NDI ID of UDF to be obtained.
 * @param [out] hash_mask_list - result of list of hash mask.
 * @param [in/out] hash_mask_count - size of hash mask list buffer as input,
 *                                   return number of hash mask in list
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_get_hash_mask(npu_id_t npu_id, ndi_obj_id_t udf_id,
                                  uint8_t *hash_mask_list, size_t *hash_mask_count);

/**
 * @brief Modify the hash mask of an existing UDF
 *
 * @param npu_id - NPU ID in which to modify
 * @param udf_id - NDI ID of UDF to be modified.
 * @param hash_mask_list - New value for UDF hash mask (all 0 in list means removal).
 * @param hash_mask_count - Number of values in hash mask list
 *
 * @return STD_ERR_OK if operation is successful otherwise a different
 *  error code is returned.
 */
t_std_error ndi_udf_set_hash_mask(npu_id_t npu_id, ndi_obj_id_t udf_id,
                                  uint8_t *hash_mask_list, size_t hash_mask_count);

#ifdef __cplusplus
}
#endif
#endif
